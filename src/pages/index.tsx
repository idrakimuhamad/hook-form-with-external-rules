import Head from 'next/head';
import { Inter } from 'next/font/google';
import styles from '~/styles/Home.module.css';
import { useForm } from 'react-hook-form';
import { FakeUmd } from '~/fakeUmd';
import { useCallback, useEffect, useState } from 'react';

const inter = Inter({ subsets: ['latin'] });

export default function Home() {
  const umd = FakeUmd;
  const {
    register,
    handleSubmit,
    trigger,
    setValue,
    watch,
    formState: { errors },
  } = useForm({
    mode: 'onChange',
    defaultValues: {
      firstName: '',
      lastName: '',
      salutation: '',
      rules: {},
    },
  });

  const watchedRules = watch('rules');

  // save the rules into the form value
  // we created an extra field for this
  // not for submitting of course
  // it could be anything, and doesn't
  // have to be the full rule, we just
  // need to have a state that changes
  const updateRules = useCallback(() => {
    const rules = umd.getRule();
    setValue('rules', rules);
    // setRules(rules);
  }, [umd]);

  // when a rule changes,
  // trigger the validation
  useEffect(() => {
    if (watchedRules) {
      trigger();
    }
  }, [watchedRules, trigger]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <form onSubmit={handleSubmit(console.log)}>
          <div>
            <select
              {...register('salutation', {
                async onChange(event) {
                  await umd.updateSalutation(event.target.value);

                  updateRules();

                  return event;
                },
              })}
            >
              <option value="">Select...</option>
              <option value="mr">MR</option>
              <option value="miss">MISS</option>
            </select>
          </div>
          <div>
            <input
              {...register('firstName', {
                // @ts-ignore
                validate: umd.getRule().firstName,
                onChange(event) {
                  umd.setFirstName(event.target.value);
                  trigger('lastName');
                  return event;
                },
              })}
              placeholder="First name"
            />
          </div>
          {errors.firstName && (
            <p
              style={{
                color: 'red',
              }}
            >
              {errors.firstName.message}
            </p>
          )}

          <div>
            <input
              {...register('lastName', {
                // @ts-ignore
                validate: umd.getRule().lastName,
                onChange(event) {
                  umd.setLastName(event.target.value);
                  trigger('firstName');
                  return event;
                },
              })}
              placeholder="Last name"
            />
          </div>
          {errors.lastName && (
            <p
              style={{
                color: 'red',
              }}
            >
              {errors.lastName.message}
            </p>
          )}
          <input type="submit" />
        </form>
      </main>
    </>
  );
}
